generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  ADMIN
  OWNER
  STAFF
  USER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  password      String?
  role          UserRole?     @default(USER)
  plan          String?       @default("trial")
  image         String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  accounts      Account[]
  subscription  Subscription?
  venues        Venue[]

  @@map("users")
}

model Subscription {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  plan      PlanType  @default(FREE)
  startDate DateTime
  endDate   DateTime?
  period    String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
  Invoice   Invoice[]
}

enum PlanType {
  FREE
  BASIC
  PROFESSIONAL
  PREMIUM
}

model Payment {
  id             String        @id @default(cuid())
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  amount         Decimal
  currency       String
  status         PaymentStatus
  paymentMethod  PaymentMethod
  paymentDate    DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Invoice        Invoice?

  @@index([subscriptionId])
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum PaymentMethod {
  IYZICO
  STRIPE
  BANK_TRANSFER
}

model Invoice {
  id             String        @id @default(cuid())
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  payment        Payment       @relation(fields: [paymentId], references: [id])
  paymentId      String        @unique
  invoiceNumber  String        @unique
  invoiceDate    DateTime
  dueDate        DateTime
  totalAmount    Decimal
  status         InvoiceStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([subscriptionId])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// Venue Model
model Venue {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @unique
  name          String
  slug          String?
  image         String?
  description   String?
  branchName    String        @default("Main Branch")
  address       String?
  phone         String?
  whatsapp      String?
  email         String?
  country       String?
  city          String?
  logo          String?
  qrSlug        String?
  wifiAddress   String?
  wifiPassword  String?
  wifiProtocol  String?
  size          String?
  features      String?
  themeSettings Json?
  openingHours  Json?
  currency      Currency?     @default(TRY)
  selected      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isActive      Boolean       @default(true)
  menus         Menu[]
  tableAreas    TableArea[]
  qrCode        QRCode[]
  table         Table[]
  waiterCall    WaiterCall[]
  billingCall   BillingCall[]
}

enum Currency {
  TRY
  USD
  EUR
  GBP
  JPY
  AED
  RUB
  CHF
  AUD
  CAD
  SGD
  KRW
  AZN
  BGN
  THB
  PLN
  NOK
  IDR
  KGS
  // Add other currencies as needed
}

enum QRCodePurpose {
  MENU_VIEW
  TABLE_ORDER
  PAYMENT
}

// New QRCode model
model QRCode {
  id        String        @id @default(cuid())
  venue     Venue         @relation(fields: [venueId], references: [id])
  venueId   String
  code      String        @unique // The actual QR code data or identifier
  image     String? // URL to the generated QR code image
  table     Table?        @relation(fields: [tableId], references: [id])
  tableId   String?       @unique
  settings  Json
  purpose   QRCodePurpose @default(MENU_VIEW)
  session   Int?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([venueId, tableId])
}

// Menu Model
model Menu {
  id          String   @id @default(cuid())
  name        String
  description String?
  url         String?
  coverLogo   String?
  coverImage  String?
  coverVideo  String?
  theme       String?
  isActive    Boolean  @default(true)
  archived    Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  callWaiter  Boolean  @default(false)
  askBill     Boolean  @default(false)
  menuView    Json?
  Venue       Venue?   @relation(fields: [venueId], references: [id])
  venueId     String?

  category Category[]
  campaign Campaign[]
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  image       String?
  coverImg    String?
  archived    Boolean   @default(false)
  featured    Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Menu        Menu      @relation(fields: [menuId], references: [id])
  menuId      String
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String?
  note        String?
  description String?
  image       String?
  labels      Json?
  order       Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Menu        Menu?      @relation(fields: [menuId], references: [id])
  menuId      String?
  menuItem    MenuItem[]
}

model MenuItem {
  id              String      @id @default(cuid())
  name            String
  description     String?
  price           Decimal?
  image           String?
  video           String?
  allergens       String[]
  ingredients     String[]
  soldOut         Boolean     @default(false)
  calories        Int?
  nutritionInfo   Json?
  grammage        String?
  priceOptions    Json?
  preparationTime Int?
  isAvailable     Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Category        Category?   @relation(fields: [categoryId], references: [id])
  categoryId      String?
  OrderItem       OrderItem[]
}

// Table management
model TableArea {
  id        String   @id @default(cuid())
  name      String
  capacity  Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Venue     Venue?   @relation(fields: [venueId], references: [id])
  venueId   String?
  table     Table[]
}

model Table {
  id                String        @id @default(cuid())
  name              String
  capacity          Int
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  qRCodeslug        String?
  QRCode            QRCode?
  Venue             Venue?        @relation(fields: [venueId], references: [id])
  venueId           String?
  waiterCalls       WaiterCall[]
  waiterCallActive  Boolean       @default(false)
  BillingCall       BillingCall[]
  billingCallActive Boolean       @default(false)
  Order             Order[]
  TableArea         TableArea?    @relation(fields: [tableAreaId], references: [id])
  tableAreaId       String?
}

enum CallStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

// New WaiterCall model
model WaiterCall {
  id         String     @id @default(cuid())
  table      Table      @relation(fields: [tableId], references: [id])
  tableId    String
  status     CallStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  resolvedAt DateTime?
  Venue      Venue?     @relation(fields: [venueId], references: [id])
  venueId    String?
}

// New BillingCall model
model BillingCall {
  id         String     @id @default(cuid())
  table      Table      @relation(fields: [tableId], references: [id])
  tableId    String
  status     CallStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  resolvedAt DateTime?
  Venue      Venue?     @relation(fields: [venueId], references: [id])
  venueId    String?
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  SERVED
  CANCELLED
}

// Order management
model Order {
  id            String        @id @default(cuid())
  table         Table         @relation(fields: [tableId], references: [id])
  tableId       String
  items         OrderItem[]
  totalAmount   Decimal
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  price      Decimal
  notes      String?
}
